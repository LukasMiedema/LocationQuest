/**
 * This class is generated by jOOQ
 */
package nl.lukasmiedema.locationquest.entity.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import nl.lukasmiedema.locationquest.entity.Keys;
import nl.lukasmiedema.locationquest.entity.LocationGame;
import nl.lukasmiedema.locationquest.entity.tables.records.AnsweredQuestionRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AnsweredQuestion extends TableImpl<AnsweredQuestionRecord> {

    private static final long serialVersionUID = -1881888077;

    /**
     * The reference instance of <code>LOCATION_GAME.ANSWERED_QUESTION</code>
     */
    public static final AnsweredQuestion ANSWERED_QUESTION = new AnsweredQuestion();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AnsweredQuestionRecord> getRecordType() {
        return AnsweredQuestionRecord.class;
    }

    /**
     * The column <code>LOCATION_GAME.ANSWERED_QUESTION.QUESTION_ID</code>.
     */
    public final TableField<AnsweredQuestionRecord, Integer> QUESTION_ID = createField("QUESTION_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>LOCATION_GAME.ANSWERED_QUESTION.TEAM_NAME</code>.
     */
    public final TableField<AnsweredQuestionRecord, String> TEAM_NAME = createField("TEAM_NAME", org.jooq.impl.SQLDataType.VARCHAR.length(2147483647).nullable(false), this, "");

    /**
     * The column <code>LOCATION_GAME.ANSWERED_QUESTION.ANSWER_ID</code>.
     */
    public final TableField<AnsweredQuestionRecord, Integer> ANSWER_ID = createField("ANSWER_ID", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>LOCATION_GAME.ANSWERED_QUESTION.TIMESTAMP</code>.
     */
    public final TableField<AnsweredQuestionRecord, Timestamp> TIMESTAMP = createField("TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("NOW()", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>LOCATION_GAME.ANSWERED_QUESTION</code> table reference
     */
    public AnsweredQuestion() {
        this("ANSWERED_QUESTION", null);
    }

    /**
     * Create an aliased <code>LOCATION_GAME.ANSWERED_QUESTION</code> table reference
     */
    public AnsweredQuestion(String alias) {
        this(alias, ANSWERED_QUESTION);
    }

    private AnsweredQuestion(String alias, Table<AnsweredQuestionRecord> aliased) {
        this(alias, aliased, null);
    }

    private AnsweredQuestion(String alias, Table<AnsweredQuestionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return LocationGame.LOCATION_GAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AnsweredQuestionRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_CE014;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AnsweredQuestionRecord>> getKeys() {
        return Arrays.<UniqueKey<AnsweredQuestionRecord>>asList(Keys.CONSTRAINT_CE014);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<AnsweredQuestionRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AnsweredQuestionRecord, ?>>asList(Keys.CONSTRAINT_CE, Keys.CONSTRAINT_CE01);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AnsweredQuestion as(String alias) {
        return new AnsweredQuestion(alias, this);
    }

    /**
     * Rename this table
     */
    public AnsweredQuestion rename(String name) {
        return new AnsweredQuestion(name, null);
    }
}
