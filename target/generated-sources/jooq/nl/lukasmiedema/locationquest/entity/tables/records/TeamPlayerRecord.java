/**
 * This class is generated by jOOQ
 */
package nl.lukasmiedema.locationquest.entity.tables.records;


import java.util.UUID;

import javax.annotation.Generated;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import nl.lukasmiedema.locationquest.entity.tables.TeamPlayer;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(name = "TEAM_PLAYER", schema = "LOCATION_GAME", uniqueConstraints = {
    @UniqueConstraint(columnNames = {"PLAYER_SESSION_ID", "TEAM_NAME"})
})
public class TeamPlayerRecord extends UpdatableRecordImpl<TeamPlayerRecord> implements Record2<UUID, String> {

    private static final long serialVersionUID = -450366314;

    /**
     * Setter for <code>LOCATION_GAME.TEAM_PLAYER.PLAYER_SESSION_ID</code>.
     */
    public TeamPlayerRecord setPlayerSessionId(UUID value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>LOCATION_GAME.TEAM_PLAYER.PLAYER_SESSION_ID</code>.
     */
    @Column(name = "PLAYER_SESSION_ID", nullable = false, precision = 2147483647)
    @NotNull
    public UUID getPlayerSessionId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>LOCATION_GAME.TEAM_PLAYER.TEAM_NAME</code>.
     */
    public TeamPlayerRecord setTeamName(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>LOCATION_GAME.TEAM_PLAYER.TEAM_NAME</code>.
     */
    @Column(name = "TEAM_NAME", nullable = false, length = 2147483647)
    @NotNull
    @Size(max = 2147483647)
    public String getTeamName() {
        return (String) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record2<UUID, String> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row2<UUID, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row2<UUID, String> valuesRow() {
        return (Row2) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<UUID> field1() {
        return TeamPlayer.TEAM_PLAYER.PLAYER_SESSION_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return TeamPlayer.TEAM_PLAYER.TEAM_NAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UUID value1() {
        return getPlayerSessionId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getTeamName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TeamPlayerRecord value1(UUID value) {
        setPlayerSessionId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TeamPlayerRecord value2(String value) {
        setTeamName(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TeamPlayerRecord values(UUID value1, String value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TeamPlayerRecord
     */
    public TeamPlayerRecord() {
        super(TeamPlayer.TEAM_PLAYER);
    }

    /**
     * Create a detached, initialised TeamPlayerRecord
     */
    public TeamPlayerRecord(UUID playerSessionId, String teamName) {
        super(TeamPlayer.TEAM_PLAYER);

        set(0, playerSessionId);
        set(1, teamName);
    }
}
