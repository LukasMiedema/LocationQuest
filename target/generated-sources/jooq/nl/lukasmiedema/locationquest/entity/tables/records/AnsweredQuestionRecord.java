/**
 * This class is generated by jOOQ
 */
package nl.lukasmiedema.locationquest.entity.tables.records;


import java.sql.Timestamp;

import javax.annotation.Generated;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import nl.lukasmiedema.locationquest.entity.tables.AnsweredQuestion;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(name = "ANSWERED_QUESTION", schema = "LOCATION_GAME", uniqueConstraints = {
    @UniqueConstraint(columnNames = {"QUESTION_ID", "TEAM_NAME"})
})
public class AnsweredQuestionRecord extends UpdatableRecordImpl<AnsweredQuestionRecord> implements Record4<Integer, String, Integer, Timestamp> {

    private static final long serialVersionUID = -338709799;

    /**
     * Setter for <code>LOCATION_GAME.ANSWERED_QUESTION.QUESTION_ID</code>.
     */
    public AnsweredQuestionRecord setQuestionId(Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>LOCATION_GAME.ANSWERED_QUESTION.QUESTION_ID</code>.
     */
    @Column(name = "QUESTION_ID", nullable = false, precision = 10)
    @NotNull
    public Integer getQuestionId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>LOCATION_GAME.ANSWERED_QUESTION.TEAM_NAME</code>.
     */
    public AnsweredQuestionRecord setTeamName(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>LOCATION_GAME.ANSWERED_QUESTION.TEAM_NAME</code>.
     */
    @Column(name = "TEAM_NAME", nullable = false, length = 2147483647)
    @NotNull
    @Size(max = 2147483647)
    public String getTeamName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>LOCATION_GAME.ANSWERED_QUESTION.ANSWER_ID</code>.
     */
    public AnsweredQuestionRecord setAnswerId(Integer value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>LOCATION_GAME.ANSWERED_QUESTION.ANSWER_ID</code>.
     */
    @Column(name = "ANSWER_ID", precision = 10)
    public Integer getAnswerId() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>LOCATION_GAME.ANSWERED_QUESTION.TIMESTAMP</code>.
     */
    public AnsweredQuestionRecord setTimestamp(Timestamp value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>LOCATION_GAME.ANSWERED_QUESTION.TIMESTAMP</code>.
     */
    @Column(name = "TIMESTAMP", nullable = false, precision = 23, scale = 10)
    public Timestamp getTimestamp() {
        return (Timestamp) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record2<Integer, String> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<Integer, String, Integer, Timestamp> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<Integer, String, Integer, Timestamp> valuesRow() {
        return (Row4) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field1() {
        return AnsweredQuestion.ANSWERED_QUESTION.QUESTION_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return AnsweredQuestion.ANSWERED_QUESTION.TEAM_NAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field3() {
        return AnsweredQuestion.ANSWERED_QUESTION.ANSWER_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Timestamp> field4() {
        return AnsweredQuestion.ANSWERED_QUESTION.TIMESTAMP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value1() {
        return getQuestionId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getTeamName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value3() {
        return getAnswerId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Timestamp value4() {
        return getTimestamp();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AnsweredQuestionRecord value1(Integer value) {
        setQuestionId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AnsweredQuestionRecord value2(String value) {
        setTeamName(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AnsweredQuestionRecord value3(Integer value) {
        setAnswerId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AnsweredQuestionRecord value4(Timestamp value) {
        setTimestamp(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AnsweredQuestionRecord values(Integer value1, String value2, Integer value3, Timestamp value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AnsweredQuestionRecord
     */
    public AnsweredQuestionRecord() {
        super(AnsweredQuestion.ANSWERED_QUESTION);
    }

    /**
     * Create a detached, initialised AnsweredQuestionRecord
     */
    public AnsweredQuestionRecord(Integer questionId, String teamName, Integer answerId, Timestamp timestamp) {
        super(AnsweredQuestion.ANSWERED_QUESTION);

        set(0, questionId);
        set(1, teamName);
        set(2, answerId);
        set(3, timestamp);
    }
}
